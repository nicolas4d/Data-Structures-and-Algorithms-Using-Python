* Chapter 2: Arrays
** 2.1 The Array Structure
*** -
    A one-dimensional array is composed of multiple sequential elements
    stored in contiguous bytes of memory and allows for random access to
    the individual elements.

    [[file:figure/Figure%202.1:%20A%20sample%201-D%20array%20consisting%20of%2011%20elements.png][Figure 2.1: A sample 1-D array consisting of 11 elements]]
*** 2.1.1 Why Study Arrays
    major differences between the array and the list:
    1. -
       - array has a limited number of operations.
       - list provides a large number of operations.
    2. -
       - list can grow and shrink during execution as elements are added or
         removed.
       - size of an array cannot be changed after it has been created.

    why provides both array and list sequence type? many problems that only
    require the number of elements is known beforehand and the flexible set
    of operations available is not needed.
    
*** 2.1.2 The Array Abstract Data Type
    [[file:ADT/Define%20Array%20ADT.org][Define Array ADT]]
    [[file:listing/useArray.py]]
*** 2.1.3 Implementing the Array
**** The ctypes Module
     ctypes module provides access to the diverse set of data types
     available in the C language and the complete functionality provided by
     a wide range of C libraries.

     The ctypes module provides the capability to create hardware-supported
     arrays.
**** Creating a Hardware Array
     #+BEGIN_SRC python
     import ctypes

     ArrayType = ctypes.py_object * 5
     slots = ArrayType()
     #+END_SRC 

     [[file:figure/Creating%20a%20Hardware%20Array.png][Creating a Hardware Array]]

     The elements of the array have to be initialized before they can be
     used. logical choice is to assign *None*.
     #+BEGIN_SRC python     
     for i in range( 5 ) :
         slots[i] = None
     #+END_SRC 

     To remove an item from the array, we simply set the corresponding
     element to None.
     #+begin_src python
     slots[3] = None
     #+end_src
**** The Class Definition
     [[file:listing/array.py]]
** 2.2 The Python List
*** -
    Python’s list structure is a mutable sequence container. It is an
    abstract data type that is implemented using an array structure to
    store the items contained in the list.
*** 2.2.1 Creating a Python List
    #+begin_src python
    pyList = [ 4, 12, 2, 34, 17 ]
    #+end_src
    created bigger than needed, leaving capacity for future expansion.

    [[file:figure/Figure%202.2:%20The%20abstract%20and%20physical%20views%20of%20a%20list%20implemented%20using%20an%20array.png.png][Figure 2.2: The abstract and physical views of a list implemented using an array.]]

    len() : the number of items currently in the subarray.
*** 2.2.2 Appending Items
    #+begin_src python
    pyList.append( 50 )
    pyList.append( 18 )
    pyList.append( 64 )
    pyList.append( 6 )
    #+end_src

    If there is room in the array, the item is stored in the next available slot
    of the array and the length field is incremented by one.

    if there is no room in the array expansion of the list, the following steps
    have to be performed:
    1. a new array is created with additional capacity, 
    2. the items from the original array are copied to the new array, 
    3. the new larger array is set as the data structure for the list,
    4. the original smaller array is destroyed.
*** 2.2.3 Extending A List
    #+begin_src python
    pyListA = [ 34, 12 ]
    pyListB = [ 4, 6, 31, 9 ]
    pyListA.extend( pyListB )
    #+end_src

    - enough capacity just copy.
    - not enough capacity then expend.
*** 2.2.4 Inserting Items
    #+begin_src python
    pyList.insert( 3, 79 )
    #+end_src
    shifting all of the items down one position starting with the item that
    will be inserted.

    #+begin_src python
    pyList.pop( 0 ) # remove the first item
    pyList.pop() # remove the last item
    #+end_src

    removes the first item from the list(or to None). the items following it
    within the array are shifted down.

    After removing. the size of the array may be reduced. This reduction occurs
    when the number of available slots in the internal array falls below a
    certain threshold.
*** 2.2.5 List Slice
    #+begin_src python
    aSlice = theVector[2:3]
    #+end_src

    create new list and copy valus.
** 2.3 Two-Dimensional Arrays
*** -
    [[file:figure/Figure%202.10.png][Figure 2.10.png]]
*** 2.3.1 The Array2D Abstract Data Type
    [[file:ADT/Define%20Array2D%20ADT.org][Define Array2D ADT]]
    [[file:listing/useArray2D.py]]
*** 2.3.2 Implementing the 2-D Array
    [[file:listing/array.py]]
**** Basic Operations
** 2.4 The Matrix Abstract Data Type
*** -
    [[file:ADT/Define%20Matrix%20ADT.org][Define Matrix ADT]]
*** 2.4.1 Matrix Operations
**** Addition and Subtraction
     [[file:figure/Addition%20and%20Subtraction.png][Addition and Subtraction.png]]
**** Scaling
     [[file:figure/Scaling.png][Scaling.png]]
**** Multiplication
     ( m × n ) * ( n × p) = ( m × p)

     [[file:figure/Multiplication.png][Multiplication.png]]
**** Transpose
     [[file:figure/Transpose.png][Transpose]]
*** 2.4.2 Implementing the Matrix
    [[file:listing/matrix.py]]
** 2.5 Application: The Game of Life
*** 2.5.1 Rules of the Game
    1. If a cell is alive and has either two or three live neighbors, the cell
       remains alive in the next generation. The neighbors are the eight cells
       immediately surrounding a cell: vertically, horizontally, and diagonally.
    2. A living cell that has no live neighbors or a single live neighbor dies
       from isolation in the next generation.
    3. A living cell that has four or more live neighbors dies from
       overpopulation in the next generation.
    4. A dead cell with exactly three live neighbors results in a birth and
       becomes alive in the next generation. All other dead cells remain dead in
       the next generation.
*** 2.5.2 Designing a Solution
    [[file:ADT/Define%20Life%20Grid%20ADT.org][Define Life Grid ADT]]
    [[file:listing/gameoflife.py]]
*** 2.5.3 Implementation
    [[file:listing/life.py]]
** Exercises
   [[file:exercise/matrix.py]]
   [[file:exercise/life.py]]
   [[file:exercise/gameoflife.py]]
** Programming Projects
